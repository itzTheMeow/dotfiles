# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ]; then
  PATH="$HOME/bin:$PATH"
fi
if [ -d "$HOME/.local/bin" ]; then
  PATH="$HOME/.local/bin:$PATH"
fi

# Disable Terminal Messaging
mesg n 2>/dev/null || true
# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [[ -n "$BASH_VERSION" ]] && ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

###########################
## Environment Variables ##
###########################

# Homebrew
[ -d "/home/linuxbrew/.linuxbrew" ] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# Rust/Cargo
[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"

# Deno
[ -f "$HOME/.deno/env" ] && . "$HOME/.deno/env"

# Restic
export RESTIC_COMPRESSION=max
{{- if eq .box "mac" }}
export RESTIC_REPOSITORY="/Users/meow/pCloud Drive/Misc/Backups/macbook"
export RESTIC_PASSWORD={{ onepasswordRead "op://Private/tw5vwxlmtwcajhtqgix7ldcitu/password" }}
{{- else if eq .box "home" }}
export RESTIC_REPOSITORY=/home/meow/pcloud/Misc/Backups/meow-pc
export RESTIC_PASSWORD={{ onepasswordRead "op://Private/we4fxvwyhtjrwzkadghpw5llje/password" }}
{{- else if eq .box "hetzner" }}
export RESTIC_REPOSITORY=/home/bak
export RESTIC_PASSWORD={{ onepasswordRead "op://Private/nwc5nliaaxa4rq64jeplaijsdi/password" }}
{{- else if eq .box "hyzen" }}
export RESTIC_REPOSITORY=rclone:pcloud:Misc/Backups/hyzenberg
export RESTIC_PASSWORD={{ onepasswordRead "op://Private/fxxd4a76am6kr6okubzdohp3nm/password" }}
{{- end }}

# Node/NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
# pnpm
export PNPM_HOME="$HOME/.local/share/pnpm"
case ":$PATH:" in
*":$PNPM_HOME:"*) ;;
*) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
{{- if eq .box "home" }}
export PATH=$(echo $PATH | sed 's|:/root/.local/share/pnpm||')
{{- end }}

# ntfy
export NTFY_TOPIC=ntfy.xela.codes/meow
export NTFY_TAGS={{ .chezmoi.hostname }}
{{- if eq .box "hyzen" }}
export NTFY_TOKEN={{ onepasswordRead "op://Private/ntfy/Access Tokens/Hyzenberg" }}
{{- else if eq .box "home" }}
export NTFY_TOKEN={{ onepasswordRead "op://Private/ntfy/Access Tokens/Meow PC" }}
{{- else if eq .box "mac" }}
export NTFY_TOKEN={{ onepasswordRead "op://Private/ntfy/Access Tokens/Mac" }}
{{- end }}

# Misc.
export THEOS=~/theos
export CHEZMOI_BOX={{ .box }}
export CHEZMOI_BOX_GROUP={{ .box_group }}

#############
## Aliases ##
#############
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias txz="tar -cJf"
alias python="python3"
alias pip="python3 -m pip"

alias ffconcat="{{ .chezmoi.homeDir }}/.bin/ffconcat.sh"
alias git-clear="{{ .chezmoi.homeDir }}/.bin/git-clear.sh"
alias restic-migrate="{{ .chezmoi.homeDir }}/.bin/restic-migrate.sh"

{{- if eq .chezmoi.os "darwin" }}
alias code="open -a /Applications/Visual\ Studio\ Code.app"
{{- end }}

###########
## Misc. ##
###########
{{- if eq .box "mac" }}
# Setting PATH for Python 3.12
export PATH="/Library/Frameworks/Python.framework/Versions/3.12/bin:${PATH}"
{{- end }}
# Setting path for golang.
if [ -d "/usr/local/go/bin" ]; then
  PATH="/usr/local/go/bin:$PATH"
fi

#############################
# Interactive Shell Options #
#############################
if [[ $- == *i* ]]; then
  clear

  # History Settings
  if [[ -n "$ZSH_VERSION" ]]; then
    HISTSIZE=10000
    SAVEHIST=10000
    setopt HIST_APPEND
    setopt INC_APPEND_HISTORY
    setopt SHARE_HISTORY
  elif [[ -n "$BASH_VERSION" ]]; then
    HISTCONTROL=ignoreboth
    HISTSIZE=10000
    HISTFILESIZE=10000
    shopt -s histappend
    shopt -s checkwinsize
  fi

  # LS Color Support
  if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
  fi

  # Tab Completion
  [ -f ~/.config/tabtab/bash/__tabtab.bash ] && . ~/.config/tabtab/bash/__tabtab.bash || true
  [ -f ~/.local/share/bash-completion/completions/deno.bash ] && . ~/.local/share/bash-completion/completions/deno.bash
  if [ -x "$(command -v pm2)" ]; then
    ###-begin-pm2-completion-###
    ### credits to npm for the completion file model
    #
    # Installation: pm2 completion >> ~/.bashrc  (or ~/.zshrc)
    #

    COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}
    COMP_WORDBREAKS=${COMP_WORDBREAKS/@/}
    export COMP_WORDBREAKS

    if type complete &>/dev/null; then
      _pm2_completion() {
        local si="$IFS"
        IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
          COMP_LINE="$COMP_LINE" \
          COMP_POINT="$COMP_POINT" \
          pm2 completion -- "${COMP_WORDS[@]}" \
          2>/dev/null)) || return $?
        IFS="$si"
      }
      complete -o default -F _pm2_completion pm2
    elif type compctl &>/dev/null; then
      _pm2_completion() {
        local cword line point words si
        read -Ac words
        read -cn cword
        let cword-=1
        read -l line
        read -ln point
        si="$IFS"
        IFS=$'\n' reply=($(COMP_CWORD="$cword" \
          COMP_LINE="$line" \
          COMP_POINT="$point" \
          pm2 completion -- "${words[@]}" \
          2>/dev/null)) || return $?
        IFS="$si"
      }
      compctl -K _pm2_completion + -f + pm2
    fi
    ###-end-pm2-completion-###
  fi

  # Init Oh-My-Posh
  [ -x "$(command -v oh-my-posh)" ] && eval "$(oh-my-posh init $(oh-my-posh get shell) --config '{{ .chezmoi.homeDir }}/.bin/theme.omp.json')"

  {{- if ne .box "-" }}
  {{- if eq .box_group "nvstly" }}
  export ARTFILE="{{ .chezmoi.homeDir }}/.bin/art-nvstly.txt"
  {{- else }}
  export ARTFILE="{{ .chezmoi.homeDir }}/.bin/art-cat.txt"
  {{- end }}
  # Startup Message
  [ "$TERM_PROGRAM" != "vscode" ] && {{ .chezmoi.homeDir }}/.bin/startup-message.sh
  {{- end }}
fi
